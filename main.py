# bot.py ‚Äî CurrencyBot —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ inline-—Ä–µ–∂–∏–º–æ–º

import requests
import re
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent, \
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, \
    filters, CallbackQueryHandler, InlineQueryHandler
from datetime import datetime, timedelta

# ===================================
# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù
TOKEN = "8358744776:AAFjPOhuoNiu8PO6JB6pIJ7xWujlpK_KolU"
# ===================================

# --- –ö—ç—à –∫—É—Ä—Å–æ–≤ ---
class CurrencyCache:
    def __init__(self):
        self.rates = {}
        self.last_update = None
        self.base = "USD"

    async def update_rates(self):
        try:
            response = requests.get(f"https://api.exchangerate-api.com/v4/latest/{self.base}")
            data = response.json()
            self.rates = data["rates"]
            self.last_update = datetime.now()
            print("‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤:", e)

    def is_expired(self):
        return self.last_update is None or datetime.now() - self.last_update > timedelta(hours=1)

    def convert(self, amount: float, from_curr: str, to_curr: str) -> float:
        if from_curr == to_curr:
            return amount
        usd_amount = amount / self.rates.get(from_curr, 1)
        return usd_amount * self.rates.get(to_curr, 1)

cache = CurrencyCache()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    keyboard = [
        [KeyboardButton("üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É")],
        [KeyboardButton("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if cache.is_expired():
        await cache.update_rates()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *CurrencyBot*.\n"
        "–ú–æ–≥—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode='Markdown'
    )

# --- /rates ---
async def show_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if cache.is_expired():
        await cache.update_rates()
    top_currencies = ["EUR", "RUB", "GBP", "JPY", "CNY", "KZT", "UZS"]
    base = "USD"
    message = f"*–ö—É—Ä—Å {base} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
    for curr in top_currencies:
        rate = cache.rates.get(curr)
        if rate:
            message += f"üíµ 1 {base} = {rate:,.4f} {curr}\n"
    await update.message.reply_text(message, parse_mode='Markdown')

# --- –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ---
async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É:\n–ù–∞–ø—Ä–∏–º–µ—Ä: `100 USD`",
        parse_mode='Markdown'
    )
    context.user_data['awaiting'] = 'amount'

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        return await show_rates(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)
    elif text == "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É":
        return await ask_amount(update, context)

    if context.user_data.get('awaiting') == 'amount':
        match = re.match(r"(\d+(?:\.\d+)?)\s*([A-Z]{3})", text, re.I)
        if match:
            amount, curr = match.groups()
            context.user_data['amount'] = float(amount)
            context.user_data['from_curr'] = curr.upper()
            await update.message.reply_text(
                f"–°—É–º–º–∞: {amount} {curr}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                reply_markup=ReplyKeyboardMarkup([
                    ["EUR", "RUB", "USD"],
                    ["GBP", "CNY", "KZT"],
                    ["–ù–∞–∑–∞–¥"]
                ], resize_keyboard=True)
            )
            context.user_data['awaiting'] = 'to_currency'
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `100 USD`")

    elif context.user_data.get('awaiting') == 'to_currency':
        if text == "–ù–∞–∑–∞–¥":
            context.user_data.clear()
            return await start(update, context)

        to_curr = text.upper()
        amount = context.user_data['amount']
        from_curr = context.user_data['from_curr']

        if to_curr not in cache.rates:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            return

        result = cache.convert(amount, from_curr, to_curr)

        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", callback_data=f"swap:{amount}:{from_curr}:{to_curr}")],
            [InlineKeyboardButton("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="convert_again")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚úÖ *{amount:,.2f} {from_curr} = {result:,.2f} {to_curr}*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        context.user_data.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data.startswith("swap:"):
        _, amount, from_curr, to_curr = data.split(":")
        result = cache.convert(float(amount), to_curr, from_curr)
        await query.edit_message_text(
            f"üîÑ *{amount} {to_curr} = {result:,.2f} {from_curr}*",
            parse_mode='Markdown',
            reply_markup=query.message.reply_markup
        )
    elif data == "convert_again":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É: `100 USD`",
            parse_mode='Markdown'
        )
        context.user_data['awaiting'] = 'amount'

# --- /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìò *CurrencyBot ‚Äî –ø–æ–º–æ—â—å*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
        "‚Ä¢ /start ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        "‚Ä¢ –ü–∏—à–∏—Ç–µ –±–æ—Ç—É: `100 USD` ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º\n"
        "‚Ä¢ –í –ª—é–±–æ–º —á–∞—Ç–µ: `@—Ç–≤–æ–π_–±–æ—Ç 50 EUR` ‚Üí inline-—Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB, GBP, JPY, CNY, KZT, UZS –∏ –¥—Ä."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

# --- INLINE-–†–ï–ñ–ò–ú ---
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.strip()
    if not query:
        return

    if cache.is_expired():
        await cache.update_rates()

    results = []

    # –§–æ—Ä–º–∞—Ç: 100 USD to RUB
    match_convert = re.match(r"(\d+(?:\.\d+)?)\s*([A-Z]{3})\s+(?:to|–≤)\s+([A-Z]{3})", query, re.I)
    if match_convert:
        amount, from_curr, to_curr = match_convert.groups()
        amount = float(amount)
        result_amount = cache.convert(amount, from_curr.upper(), to_curr.upper())
        if result_amount:
            results.append(
                InlineQueryResultArticle(
                    id="convert",
                    title=f"{amount} {from_curr} ‚Üí {to_curr}",
                    description=f"{result_amount:,.2f} {to_curr}",
                    input_message_content=InputTextMessageContent(
                        f"{amount} {from_curr} = {result_amount:,.2f} {to_curr}"
                    ),
                )
            )
    else:
        # –§–æ—Ä–º–∞—Ç: 100 USD
        match_simple = re.match(r"(\d+(?:\.\d+)?)\s*([A-Z]{3})", query, re.I)
        if match_simple:
            amount, curr = match_simple.groups()
            amount = float(amount)
            curr = curr.upper()
            targets = ["EUR", "RUB", "GBP", "KZT", "UZS", "CNY"]
            for t in targets:
                if t != curr and t in cache.rates:
                    converted = cache.convert(amount, curr, t)
                    results.append(
                        InlineQueryResultArticle(
                            id=f"{curr}_{t}_{amount}",
                            title=f"{amount} {curr}",
                            description=f"‚Üí {converted:,.2f} {t}",
                            input_message_content=InputTextMessageContent(
                                f"{amount} {curr} = {converted:,.2f} {t}"
                            ),
                        )
                    )
        else:
            # –¢–æ–ª—å–∫–æ –≤–∞–ª—é—Ç–∞: USD
            match_curr = re.match(r"([A-Z]{3})", query, re.I)
            if match_curr:
                curr = match_curr.group(1).upper()
                if curr in cache.rates:
                    rate = cache.rates[curr]
                    results.append(
                        InlineQueryResultArticle(
                            id=curr,
                            title=f"–ö—É—Ä—Å {curr}",
                            description=f"1 {curr} = {rate:.4f} USD",
                            input_message_content=InputTextMessageContent(
                                f"–ö—É—Ä—Å {curr}: 1 {curr} = {rate:.4f} USD"
                            ),
                        )
                    )

    if not results:
        results.append(
            InlineQueryResultArticle(
                id="help",
                title="–ü—Ä–∏–º–µ—Ä—ã",
                description="100 USD, 50 EUR to RUB",
                input_message_content=InputTextMessageContent(
                    "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ 100 USD\n‚Ä¢ 50 EUR to RUB\n‚Ä¢ @—Ç–≤–æ–π_–±–æ—Ç 10 USD"
                ),
            )
        )

    await update.inline_query.answer(results, cache_time=300, is_personal=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º CurrencyBot (—Å inline-—Ä–µ–∂–∏–º–æ–º)...")
    app = Application.builder().token(TOKEN).build()

    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rates", show_rates))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    # Inline-—Ä–µ–∂–∏–º
    app.add_handler(InlineQueryHandler(inline_query))

    app.run_polling()

if __name__ == "__main__":
    main()
